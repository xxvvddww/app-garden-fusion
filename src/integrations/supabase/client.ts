
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xkxaoyuxdxamhszltqgx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhreGFveXV4ZHhhbWhzemx0cWd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNTg4NjEsImV4cCI6MjA1NzYzNDg2MX0.easK7cjl-T9o31F1xV804WcFa8oDmaQI6YQLwt__xqc";

// Create cache keys with version numbers to force cache invalidation if needed
const VERSION = '1';
const SESSION_KEY = `bay-management-auth-token-v${VERSION}`;
const SESSION_CACHE_KEY = `bay-management-session-cache-v${VERSION}`;
const LAST_SESSION_REFRESH_KEY = `bay-management-last-refresh-v${VERSION}`;
const FORCE_SESSION_RELOAD_KEY = `bay-management-force-reload-v${VERSION}`;

// Modified debug helpers
const enableDebug = true;
const logDebug = (message: string, data?: any) => {
  if (enableDebug) {
    if (data) {
      console.log(`[Supabase Client] ${message}`, data);
    } else {
      console.log(`[Supabase Client] ${message}`);
    }
  }
};

// Helper for safer localStorage access
const safeLocalStorage = {
  get: (key: string): string | null => {
    try {
      return localStorage.getItem(key);
    } catch (e) {
      console.error(`Error reading from localStorage for key ${key}:`, e);
      return null;
    }
  },
  set: (key: string, value: string): boolean => {
    try {
      localStorage.setItem(key, value);
      return true;
    } catch (e) {
      console.error(`Error writing to localStorage for key ${key}:`, e);
      return false;
    }
  },
  remove: (key: string): boolean => {
    try {
      localStorage.removeItem(key);
      return true;
    } catch (e) {
      console.error(`Error removing from localStorage for key ${key}:`, e);
      return false;
    }
  },
  clear: (): boolean => {
    try {
      localStorage.clear();
      return true;
    } catch (e) {
      console.error(`Error clearing localStorage:`, e);
      return false;
    }
  }
};

// Clear stored data to force a clean session if requested
const forcedReloadTime = safeLocalStorage.get(FORCE_SESSION_RELOAD_KEY);
if (forcedReloadTime) {
  const now = Date.now();
  const reloadTime = parseInt(forcedReloadTime, 10);
  const timeSinceReload = now - reloadTime;
  
  // Only clear the session if the forced reload was requested within the last 5 minutes
  if (timeSinceReload < 5 * 60 * 1000) {
    logDebug("Forced session reload detected, clearing cached data");
    safeLocalStorage.remove(SESSION_KEY);
    safeLocalStorage.remove(SESSION_CACHE_KEY);
    safeLocalStorage.remove(LAST_SESSION_REFRESH_KEY);
  }
  
  // Always clear the force reload flag
  safeLocalStorage.remove(FORCE_SESSION_RELOAD_KEY);
}

// Initialize the Supabase client with explicit type and improved error handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: SESSION_KEY,
    debug: enableDebug,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    },
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      // Add custom logging for debugging database requests
      const urlString = typeof url === 'string' ? url : url.toString();
      logDebug(`Request to: ${urlString}`);
      
      if (options?.method) {
        logDebug(`Method: ${options.method}`);
      }
      
      // Enhanced logging for DELETE requests
      if (options?.method === 'DELETE') {
        logDebug(`DELETE Request URL: ${urlString}`);
        
        // Extract and log query parameters for DELETE requests
        try {
          const urlObj = new URL(urlString);
          logDebug('DELETE Query Params:', Object.fromEntries(urlObj.searchParams.entries()));
          logDebug('DELETE Headers:', options.headers);
          
          // Log the specific table and filter being used in the delete operation
          const pathParts = urlObj.pathname.split('/');
          if (pathParts.length >= 4) {
            const tableName = pathParts[pathParts.length - 1];
            logDebug(`Attempting to delete from table: ${tableName}`);
            
            // Extract filter conditions from query params
            const filters = [];
            for (const [key, value] of urlObj.searchParams.entries()) {
              if (key.includes('.eq')) {
                const field = key.split('.')[0];
                filters.push(`${field} = ${value}`);
              }
            }
            
            if (filters.length > 0) {
              logDebug(`Filter conditions: ${filters.join(' AND ')}`);
            } else {
              console.warn('WARNING: DELETE operation with no filter conditions detected!');
            }
          }
        } catch (e) {
          logDebug(`Error parsing DELETE URL: ${e}`);
        }
      }
      
      if (options?.body) {
        try {
          logDebug(`Request body: ${JSON.stringify(JSON.parse(options.body as string), null, 2)}`);
        } catch (e) {
          logDebug(`Request body: ${options.body}`);
        }
      }
      
      return fetch(url, options).then(async (response) => {
        // Clone response to allow reading the body multiple times
        const clonedResponse = response.clone();
        
        try {
          const responseData = await clonedResponse.json();
          logDebug(`Response status: ${response.status} ${response.statusText}`);
          
          // Special handling for DELETE operations
          if (options?.method === 'DELETE') {
            logDebug(`DELETE response: ${JSON.stringify(responseData, null, 2)}`);
            
            // Check if the deletion was successful based on response
            if (!response.ok) {
              console.error(`DELETE operation failed with status ${response.status}: ${JSON.stringify(responseData)}`);
              if (response.status === 403) {
                console.error('PERMISSION DENIED: Check that you have the correct RLS policies in place!');
              }
            } else if (responseData?.count !== undefined) {
              logDebug(`DELETE operation succeeded, rows affected: ${responseData.count}`);
              if (responseData.count === 0) {
                console.warn('Warning: DELETE operation succeeded but no rows were affected!');
              }
            } else {
              logDebug(`DELETE operation response: ${JSON.stringify(responseData)}`);
            }
          } else {
            logDebug(`Response: ${JSON.stringify(responseData)}`);
          }
        } catch (e) {
          logDebug(`Could not parse response as JSON: ${e}`);
          logDebug(`Response status: ${response.status} ${response.statusText}`);
          
          // Try to at least log the text response
          try {
            const textResponse = await response.clone().text();
            logDebug(`Response text: ${textResponse}`);
          } catch (textError) {
            logDebug(`Could not get response text: ${textError}`);
          }
        }
        
        return response;
      }).catch(error => {
        console.error(`Network error in Supabase request to ${urlString}:`, error);
        throw error;
      });
    }
  }
});

// Enhanced session refresh with throttling to avoid excessive calls
export const refreshSession = async () => {
  try {
    logDebug("Attempting to refresh session");
    
    // Implement basic throttling - don't refresh more than once per 10 seconds
    const lastRefresh = safeLocalStorage.get(LAST_SESSION_REFRESH_KEY);
    const now = Date.now();
    
    if (lastRefresh) {
      const timeSinceLastRefresh = now - parseInt(lastRefresh);
      if (timeSinceLastRefresh < 10000) { // 10 seconds
        logDebug(`Skipping refresh, last refresh was ${timeSinceLastRefresh}ms ago`);
        
        // Try to get session directly if we're skipping the refresh
        const { data: sessionData } = await supabase.auth.getSession();
        return { data: sessionData, error: null };
      }
    }
    
    // Update last refresh timestamp
    safeLocalStorage.set(LAST_SESSION_REFRESH_KEY, now.toString());
    
    // Always try a network refresh
    const { data, error } = await supabase.auth.refreshSession();
    
    if (data.session) {
      logDebug("Session refreshed successfully:", {
        userId: data.session.user.id,
        expiresAt: new Date(data.session.expires_at! * 1000).toISOString()
      });
      
      // Cache successful session data
      try {
        safeLocalStorage.set(SESSION_CACHE_KEY, JSON.stringify({
          userId: data.session.user.id,
          timestamp: Date.now(),
          expiresAt: data.session.expires_at
        }));
      } catch (e) {
        console.error("Error caching session data:", e);
      }
      
      return { data, error };
    } else if (error) {
      logDebug("Error refreshing session:", error.message);
      
      // If refresh failed, try to get the session directly
      logDebug("Attempting to get session directly after refresh failure");
      const { data: sessionData } = await supabase.auth.getSession();
      if (sessionData.session) {
        logDebug("Got session directly:", {
          userId: sessionData.session.user.id,
          expiresAt: new Date(sessionData.session.expires_at! * 1000).toISOString()
        });
        return { data: sessionData, error: null };
      }
      
      return { data, error };
    } else {
      logDebug("Session refresh returned no session and no error");
      return { data, error };
    }
  } catch (e) {
    console.error("Exception during session refresh:", e);
    return { data: { session: null, user: null }, error: e as Error };
  }
};

// Improved helper function to check if we have a potentially valid session
export const hasPotentialSession = () => {
  try {
    // Check local storage for session data
    const hasLocalStorageSession = !!safeLocalStorage.get(SESSION_KEY);
    
    // Check for cached session data
    const cachedSessionData = safeLocalStorage.get(SESSION_CACHE_KEY);
    let hasRecentCachedSession = false;
    let hasValidCachedSession = false;
    
    if (cachedSessionData) {
      try {
        const cachedSession = JSON.parse(cachedSessionData);
        const cacheAge = Date.now() - (cachedSession.timestamp || 0);
        
        // Consider cache valid if less than 24 hours old
        hasRecentCachedSession = cacheAge < 24 * 60 * 60 * 1000;
        
        // Check if the session is still valid based on expiration time
        if (cachedSession.expiresAt) {
          const now = Math.floor(Date.now() / 1000); // Convert to seconds
          hasValidCachedSession = cachedSession.expiresAt > now;
        }
      } catch (e) {
        console.error("Error parsing cached session:", e);
      }
    }
    
    const result = hasLocalStorageSession || hasRecentCachedSession || hasValidCachedSession;
    
    logDebug("Potential session check:", {
      hasLocalStorageSession,
      hasRecentCachedSession,
      hasValidCachedSession,
      result
    });
    
    return result;
  } catch (e) {
    console.error("Error checking for potential session:", e);
    return false;
  }
};

// Force getSession to do a network call to verify token
export const forceGetSession = async () => {
  try {
    // Clear any cached auth results first
    safeLocalStorage.remove(LAST_SESSION_REFRESH_KEY);
    
    // Clear browser memory and start fresh
    const originalValue = safeLocalStorage.get(SESSION_KEY);
    if (originalValue) {
      // Temporarily remove the session
      safeLocalStorage.remove(SESSION_KEY);
      
      // Wait a small amount of time for any in-progress operations to complete
      await new Promise(resolve => setTimeout(resolve, 50));
      
      // Put the original value back
      safeLocalStorage.set(SESSION_KEY, originalValue);
    }
    
    // Force a new session check
    logDebug("Forcing a new session check");
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error("Error in forceGetSession:", error.message);
      return { data: { session: null, user: null }, error };
    }
    
    if (data.session) {
      logDebug("Session found in forceGetSession:", {
        userId: data.session.user.id,
        expiresAt: new Date(data.session.expires_at! * 1000).toISOString()
      });
      
      // Update the cache
      safeLocalStorage.set(SESSION_CACHE_KEY, JSON.stringify({
        userId: data.session.user.id,
        timestamp: Date.now(),
        expiresAt: data.session.expires_at
      }));
    } else {
      logDebug("No session found in forceGetSession");
    }
    
    return { data, error: null };
  } catch (e) {
    console.error("Exception in forceGetSession:", e);
    return { data: { session: null, user: null }, error: e as Error };
  }
};

// New helper to completely reset the session state
export const resetSessionState = async () => {
  logDebug("Resetting all session state");
  
  try {
    // Set the force reload flag
    safeLocalStorage.set(FORCE_SESSION_RELOAD_KEY, Date.now().toString());
    
    // Clear all session-related storage
    safeLocalStorage.remove(SESSION_KEY);
    safeLocalStorage.remove(SESSION_CACHE_KEY);
    safeLocalStorage.remove(LAST_SESSION_REFRESH_KEY);
    
    // Pause briefly to let changes take effect
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Force a clean session check
    return await forceGetSession();
  } catch (e) {
    console.error("Error resetting session state:", e);
    return { data: { session: null, user: null }, error: e as Error };
  }
};

// Event listener for storage changes to help with cross-tab session management
try {
  window.addEventListener('storage', (event) => {
    if (event.key === SESSION_KEY && event.newValue !== event.oldValue) {
      logDebug("Session storage changed in another tab, refreshing session state");
      forceGetSession().catch(err => {
        console.error("Error handling cross-tab session change:", err);
      });
    }
  });
} catch (e) {
  console.error("Failed to add storage event listener:", e);
}
