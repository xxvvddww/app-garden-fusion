
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xkxaoyuxdxamhszltqgx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhreGFveXV4ZHhhbWhzemx0cWd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIwNTg4NjEsImV4cCI6MjA1NzYzNDg2MX0.easK7cjl-T9o31F1xV804WcFa8oDmaQI6YQLwt__xqc";

// Create a session key that includes device info to help with session restoration
const SESSION_KEY = 'bay-management-auth-token';
const SESSION_CACHE_KEY = 'bay-management-session-cache';

// Initialize the Supabase client with explicit type and improved error handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storageKey: SESSION_KEY,
    debug: true,
    detectSessionInUrl: true
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'Content-Type': 'application/json'
    },
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      // Add custom logging for debugging database requests
      const urlString = typeof url === 'string' ? url : url.toString();
      console.log(`Supabase request to: ${urlString}`);
      
      if (options?.method) {
        console.log(`Method: ${options.method}`);
      }
      
      // Enhanced logging for DELETE requests
      if (options?.method === 'DELETE') {
        console.log(`DELETE Request URL: ${urlString}`);
        
        // Extract and log query parameters for DELETE requests
        try {
          const urlObj = new URL(urlString);
          console.log('DELETE Query Params:', Object.fromEntries(urlObj.searchParams.entries()));
          console.log('DELETE Headers:', options.headers);
          
          // Log the specific table and filter being used in the delete operation
          const pathParts = urlObj.pathname.split('/');
          if (pathParts.length >= 4) {
            const tableName = pathParts[pathParts.length - 1];
            console.log(`Attempting to delete from table: ${tableName}`);
            
            // Extract filter conditions from query params
            const filters = [];
            for (const [key, value] of urlObj.searchParams.entries()) {
              if (key.includes('.eq')) {
                const field = key.split('.')[0];
                filters.push(`${field} = ${value}`);
              }
            }
            
            if (filters.length > 0) {
              console.log(`Filter conditions: ${filters.join(' AND ')}`);
            } else {
              console.warn('WARNING: DELETE operation with no filter conditions detected!');
            }
          }
        } catch (e) {
          console.log(`Error parsing DELETE URL: ${e}`);
        }
      }
      
      if (options?.body) {
        try {
          console.log(`Request body: ${JSON.stringify(JSON.parse(options.body as string), null, 2)}`);
        } catch (e) {
          console.log(`Request body: ${options.body}`);
        }
      }
      
      return fetch(url, options).then(async (response) => {
        // Clone response to allow reading the body multiple times
        const clonedResponse = response.clone();
        
        try {
          const responseData = await clonedResponse.json();
          console.log(`Supabase response status: ${response.status} ${response.statusText}`);
          
          // Special handling for DELETE operations
          if (options?.method === 'DELETE') {
            console.log(`DELETE response: ${JSON.stringify(responseData, null, 2)}`);
            
            // Check if the deletion was successful based on response
            if (!response.ok) {
              console.error(`DELETE operation failed with status ${response.status}: ${JSON.stringify(responseData)}`);
              if (response.status === 403) {
                console.error('PERMISSION DENIED: Check that you have the correct RLS policies in place!');
              }
            } else if (responseData?.count !== undefined) {
              console.log(`DELETE operation succeeded, rows affected: ${responseData.count}`);
              if (responseData.count === 0) {
                console.warn('Warning: DELETE operation succeeded but no rows were affected!');
              }
            } else {
              console.log(`DELETE operation response: ${JSON.stringify(responseData)}`);
            }
          } else {
            console.log(`Supabase response: ${JSON.stringify(responseData, null, 2)}`);
          }
        } catch (e) {
          console.log(`Could not parse response as JSON: ${e}`);
          console.log(`Response status: ${response.status} ${response.statusText}`);
          
          // Try to at least log the text response
          try {
            const textResponse = await response.clone().text();
            console.log(`Response text: ${textResponse}`);
          } catch (textError) {
            console.log(`Could not get response text: ${textError}`);
          }
        }
        
        return response;
      }).catch(error => {
        console.error(`Network error in Supabase request to ${urlString}:`, error);
        throw error;
      });
    }
  }
});

// Function to force refresh the session
export const refreshSession = async () => {
  try {
    console.log("Attempting to refresh session");
    
    // Try to get session from cache first to avoid network request
    const cachedSessionData = localStorage.getItem(SESSION_CACHE_KEY);
    let cachedSession = null;
    if (cachedSessionData) {
      try {
        cachedSession = JSON.parse(cachedSessionData);
        console.log("Found cached session:", !!cachedSession);
      } catch (e) {
        console.error("Error parsing cached session:", e);
        localStorage.removeItem(SESSION_CACHE_KEY);
      }
    }
    
    // Always try a network refresh regardless of cached data
    const { data, error } = await supabase.auth.refreshSession();
    
    if (data.session) {
      console.log("Session refreshed successfully:", {
        userId: data.session.user.id,
        expiresAt: new Date(data.session.expires_at! * 1000).toISOString()
      });
      
      // Cache successful session data
      try {
        localStorage.setItem(SESSION_CACHE_KEY, JSON.stringify({
          userId: data.session.user.id,
          timestamp: Date.now()
        }));
      } catch (e) {
        console.error("Error caching session data:", e);
      }
      
      return { data, error };
    } else if (error) {
      console.error("Error refreshing session:", error.message);
      
      // If refresh failed but we have cached session, try to get the session directly
      if (cachedSession) {
        console.log("Attempting to get session directly after refresh failure");
        const { data: sessionData } = await supabase.auth.getSession();
        if (sessionData.session) {
          console.log("Got session directly:", {
            userId: sessionData.session.user.id,
            expiresAt: new Date(sessionData.session.expires_at! * 1000).toISOString()
          });
          return { data: sessionData, error: null };
        }
      }
      
      return { data, error };
    } else {
      console.log("Session refresh returned no session and no error");
      return { data, error };
    }
  } catch (e) {
    console.error("Exception during session refresh:", e);
    return { data: { session: null, user: null }, error: e as Error };
  }
};

// Helper function to check if we have a potentially valid session
export const hasPotentialSession = () => {
  try {
    // Check local storage for session data
    const hasLocalStorageSession = !!localStorage.getItem(SESSION_KEY);
    
    // Check for cached session data
    const cachedSessionData = localStorage.getItem(SESSION_CACHE_KEY);
    let hasRecentCachedSession = false;
    
    if (cachedSessionData) {
      try {
        const cachedSession = JSON.parse(cachedSessionData);
        const cacheAge = Date.now() - (cachedSession.timestamp || 0);
        // Consider cache valid if less than 24 hours old
        hasRecentCachedSession = cacheAge < 24 * 60 * 60 * 1000;
      } catch (e) {
        console.error("Error parsing cached session:", e);
      }
    }
    
    console.log("Potential session check:", {
      hasLocalStorageSession,
      hasRecentCachedSession
    });
    
    return hasLocalStorageSession || hasRecentCachedSession;
  } catch (e) {
    console.error("Error checking for potential session:", e);
    return false;
  }
};
